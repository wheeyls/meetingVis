(function() {
  var CSSwhat, CoffeeSelect, attributeRules, c, checkAttrib, falseFunc, filters, generalRules, getAttribFunc, getAttributeValue, getChildren, getFunc, getIndex, getNCheck, getName, getParent, getSiblings, getText, getUniqueName, hasAttrib, isElement, iterate, lastUniqueName, parse, possibleChars, procedure, pseudos, quote, reChars, re_nthElement, rootFunc, sortByProcedure, trueFunc, uniqNameCounter, wrapReRule,
    __indexOf = Array.prototype.indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CSSwhat = require("CSSwhat");

  isElement = function(elem) {
    if (elem == null) elem = "elem";
    return "(" + elem + ".type === 'tag' || " + elem + ".type === 'style' || " + elem + ".type === 'script')";
  };

  getChildren = function(elem) {
    if (elem == null) elem = "elem";
    return "" + elem + ".children";
  };

  getParent = function(elem) {
    if (elem == null) elem = "elem";
    return "" + elem + ".parent";
  };

  getAttributeValue = function(elem, name) {
    if (elem == null) elem = "elem";
    return "" + elem + ".attribs[" + (quote(name)) + "]";
  };

  hasAttrib = function(elem, name) {
    if (elem == null) elem = "elem";
    return "(" + elem + ".attribs && " + (quote(name)) + " in " + elem + ".attribs)";
  };

  getName = function(elem) {
    if (elem == null) elem = "elem";
    return "" + elem + ".name";
  };

  getText = function(elem) {
    if (elem == null) elem = "elem";
    return "(function getText(node){\n	var text = \"\",\n		childs = " + (getChildren("node")) + ";\n\n	if(!childs) return text;\n\n	for(var i = 0, j = childs.length; i < j; i++){\n		if(" + (isElement("childs[i]")) + ") text += getText(childs[i]);\n		else text += childs[i].data;\n	}\n\n	return text;\n})(" + elem + ")";
  };

  /*
  	helper methods
  */

  getSiblings = function(elem) {
    return "" + (getParent(elem)) + " && " + (getChildren(getParent(elem)));
  };

  getIndex = function(elem) {
    return "var siblings = " + (getSiblings(elem)) + ",\n    pos = -1;\n\nif(siblings){\n	for(var i = 0, j = siblings.length; i < j; i++){\n		if(" + (isElement("siblings[i]")) + ") pos++;\n		if(siblings[i] === " + elem + ") break;\n	}\n	if(i === j) pos = -1;\n}";
  };

  getAttribFunc = function(name, value) {
    return function(next) {
      return checkAttrib(next, name, value, false);
    };
  };

  checkAttrib = function(next, name, value, ignoreCase) {
    return "if(" + (hasAttrib("elem", name)) + " && " + (getAttributeValue("elem", name)) + "\n	" + (ignoreCase ? ".toLowerCase()" : "") + " === " + (quote(value)) + "){\n	" + next + "\n}";
  };

  rootFunc = "return true";

  trueFunc = "return true;";

  falseFunc = "return false;";

  quote = function(str) {
    return "'" + (str.replace(/'/g, "\\'")) + "'";
  };

  possibleChars = [].concat(((function() {
    var _results;
    _results = [];
    for (c = 48; c < 57; c++) {
      _results.push(String.fromCharCode(c));
    }
    return _results;
  })()).concat(((function() {
    var _results;
    _results = [];
    for (c = 65; c < 91; c++) {
      _results.push(String.fromCharCode(c));
    }
    return _results;
  })()).concat(((function() {
    var _results;
    _results = [];
    for (c = 97; c < 123; c++) {
      _results.push(String.fromCharCode(c));
    }
    return _results;
  })()).concat("_", "$"))));

  lastUniqueName = "";

  uniqNameCounter = 0;

  getUniqueName = function() {
    var counter;
    lastUniqueName = "_$__";
    counter = uniqNameCounter;
    uniqNameCounter += 1;
    while (counter > 0) {
      if (counter >= possibleChars.length) {
        counter -= possibleChars.length - 1;
        lastUniqueName += possibleChars[possibleChars.length - 1];
      } else {
        lastUniqueName += possibleChars[counter];
        counter = 0;
      }
    }
    return lastUniqueName;
  };

  /*
  	all available rules
  */

  generalRules = {
    tag: function(next, _arg) {
      var name;
      name = _arg.name;
      return "if(" + (getName()) + " === " + (quote(name)) + "){ " + next + " }";
    },
    descendant: function(next) {
      return "var " + (getUniqueName("")) + " = elem;\nwhile(elem = " + (getParent("elem")) + "){\n	" + next + "\n}\nelem = " + lastUniqueName + ";";
    },
    child: function(next) {
      return "var " + (getUniqueName("")) + " = elem;\nif(elem = " + (getParent("elem")) + "){\n	" + next + "\n}\nelem = " + lastUniqueName + ";";
    },
    sibling: function(next) {
      var elemName, sibling;
      sibling = getUniqueName();
      elemName = getUniqueName();
      return "var " + sibling + " = " + (getSiblings("elem")) + ",\n    " + elemName + " = elem;\n\nif(" + sibling + "){\n	for(var i = 0, j = " + sibling + ".length; i < j; i++){\n		elem = " + sibling + "[i];\n		if(" + (isElement("elem")) + "){\n			if(" + sibling + "[i] === " + elemName + ") break;\n			" + next + "\n		}\n	}\n}\nelem = " + elemName + ";";
    },
    adjacent: function(next) {
      return "var siblings = " + (getSiblings("elem")) + ",\n    " + (getUniqueName("")) + " = elem;\nif(siblings){\n	var lastElement;\n	for(var i = 0, j = siblings.length; i < j; i++){\n		if(" + (isElement("siblings[i]")) + "){\n			if(siblings[i] === elem){\n				if(lastElement){\n					elem = lastElement;\n					" + next + "\n				}\n				break;\n			}\n			lastElement = siblings[i];\n		}\n	}\n}\nelem = " + lastUniqueName + ";";
    },
    universal: function(next) {
      if (next === rootFunc) {
        return trueFunc;
      } else {
        return next;
      }
    },
    id: function(next, _arg) {
      var value;
      value = _arg.value;
      return attributeRules.equals(next, "id", value, false);
    },
    "class": function(next, _arg) {
      var value;
      value = _arg.value;
      return attributeRules.element(next, "class", value, false);
    },
    attribute: function(next, _arg) {
      var action, ignoreCase, name, value;
      ignoreCase = _arg.ignoreCase, action = _arg.action, name = _arg.name, value = _arg.value;
      if (ignoreCase) value = value.toLowerCase();
      return attributeRules[action](next, name, value, ignoreCase);
    },
    pseudo: function(next, _arg) {
      var name, subselect;
      name = _arg.name, subselect = _arg.data;
      if (filters[name] != null) {
        return filters[name](next, subselect);
      } else if (pseudos[name] != null) {
        return "if(pseudos[" + (quote(name)) + "](elem, " + (quote(subselect)) + ")){\n	" + next + "\n}";
      } else {
        return next;
      }
    }
  };

  /*
  	attribute selectors
  */

  reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;

  wrapReRule = function(pre, post) {
    return function(next, name, value, ignoreCase) {
      return "if(\n	" + (hasAttrib("elem", name)) + " &&\n	/" + (pre + value.replace(reChars, "\\$&") + post) + "/" + (ignoreCase ? "i" : "") + ".test(" + (getAttributeValue("elem", name)) + ")\n){\n	" + next + "\n} ";
    };
  };

  attributeRules = {
    equals: checkAttrib,
    hyphen: wrapReRule("^", "(?:$|-)"),
    element: wrapReRule("(?:^|\\s)", "(?:$|\\s)"),
    exists: function(next, name) {
      return "if(" + (hasAttrib("elem", name)) + "){ " + next + " }";
    },
    start: function(next, name, value, ignoreCase) {
      return "if(\n	" + (hasAttrib("elem", name)) + " &&\n    " + (getAttributeValue("elem", name)) + ".substr(0, " + value.length + ")\n    	" + (ignoreCase ? ".toLowerCase()" : "") + " === " + (quote(value)) + "\n){\n	" + next + "\n}";
    },
    end: function(next, name, value, ignoreCase) {
      return "if(\n	" + (hasAttrib("elem", name)) + " &&\n     " + (getAttributeValue("elem", name)) + ".substr(" + (-value.length) + ")\n     	" + (ignoreCase ? ".toLowerCase()" : "") + " === " + (quote(value)) + "\n){\n	" + next + "\n}";
    },
    any: function(next, name, value, ignoreCase) {
      return "if(\n	" + (hasAttrib("elem", name)) + " &&\n    " + (getAttributeValue("elem", name)) + (ignoreCase ? ".toLowerCase()" : "") + "\n    	.indexOf(" + (quote(value)) + ") >= 0\n){\n	" + next + "\n}";
    },
    not: function(next, name, value, ignoreCase) {
      if (value === "") {
        return "if(\n	" + (hasAttrib("elem", name)) + " &&\n	" + (getAttributeValue("elem", name)) + " !== \"\"\n){\n	" + next + "\n}";
      } else {
        return "if(\n	!" + (hasAttrib("elem", name)) + " ||\n	" + (getAttributeValue("elem", name)) + "\n		" + (ignoreCase ? ".toLowerCase()" : "") + " !== " + (quote(value)) + "\n){\n	" + next + "\n}";
      }
    }
  };

  /*
  	pseudo selectors
  	
  	---
  	
  	they are available in two forms:
  	* filters called when the selector 
  	  is compiled and return a function
  	  that needs to return next()
  	* pseudos get called on execution
  	  they need to return a boolean
  */

  /*
  	returns a function that checks if an elements index matches the given rule
  	highly optimized to return the fastest solution
  */

  re_nthElement = /^([+\-]?\d*n)?\s*([+\-])?\s*(\d)?$/;

  getNCheck = function(formula) {
    var a, b;
    formula = formula.trim().toLowerCase();
    if (formula === "even") {
      a = 2;
      b = -1;
    } else if (formula === "odd") {
      a = 2;
      b = 0;
    } else {
      formula = formula.match(re_nthElement);
      if (formula == null) return null;
      if (formula[1]) {
        a = parseInt(formula[1], 10);
        if (!a) {
          if (formula[1].charAt(0) === "-") {
            a = -1;
          } else {
            a = 1;
          }
        }
      } else {
        a = 0;
      }
      if (formula[3]) {
        b = parseInt((formula[2] || "") + formula[3], 10) - 1;
      } else {
        b = -1;
      }
    }
    if (b < 0 && a <= 0) return falseFunc;
    if (b < 0 && a === 1) return trueFunc;
    if (a === -1) "pos - " + b + " <= 0";
    if (a === 1) "pos - " + b + " >= 0";
    if (a === 0) "pos === b";
    if (a > 1) "pos >= 0 && (pos -= " + b + ") >= 0 && (pos % " + a + ") === 0";
    a *= -1;
    return "pos >= 0 && (pos -= " + b + ") >= 0 && (pos % " + a + ") === 0 && pos/" + a + " < " + b;
  };

  filters = {
    not: function(next, select) {
      var func;
      func = parse(select);
      if (func === falseFunc) {
        return trueFunc(next === rootFunc ? void 0 : next);
      } else if (func === trueFunc || func === rootFunc) {
        return falseFunc;
      } else {
        return "if(!(function(elem){" + func + "})(elem)){ " + next + " }";
      }
    },
    contains: function(next, text) {
      return "if(" + (getText("elem")) + ".indexOf(" + (quote(text)) + ") >= 0){ " + next + " }";
    },
    has: function(next, select) {
      var func;
      func = parse(select);
      if (func === trueFunc || func === rootFunc) {
        return next;
      } else if (func === falseFunc) {
        return falseFunc;
      } else {
        return "if((function proc(elem){\n	var children = " + (getChildren("elem")) + ";\n	if(!children) return;\n	for(var i = 0, j = children.length; i < j; i++){\n		if(!" + (isElement("children[i]")) + ") continue;\n		if((function(elem){ " + func + " })(children[i])) return true;\n		if(proc(children[i])) return true;\n	}\n})(elem)){ " + next + " }";
      }
    },
    root: function(next) {
      return "if(!" + (getParent("elem")) + "){ " + next + " }";
    },
    empty: function(next) {
      return "if(!" + (getChildren("elem")) + " || " + (getChildren("elem")) + ".length === 0){\n" + next + "\n}";
    },
    parent: function(next) {
      return "if(" + (getChildren("elem")) + " && " + (getChildren("elem")) + ".length !== 0){\n" + next + "\n}";
    },
    "first-child": function(next) {
      return "var siblings = " + (getSiblings("elem")) + ";\nif(siblings){\n	for(var i = 0, j = siblings.length; i < j; i++){\n		if(" + (isElement("siblings[i]")) + "){\n			if(siblings[i] === elem){\n				" + next + "\n			}\n			break;\n		}\n	}\n}";
    },
    "last-child": function(next) {
      return "var siblings = " + (getSiblings("elem")) + ";\nif(siblings){\n	for(var i = siblings.length-1; i >= 0; i--){\n		if(" + (isElement("siblings[i]")) + "){\n			if(siblings[i] === elem){\n				" + next + "\n			}\n			break;\n		}\n	}\n}";
    },
    "first-of-type": function(next) {
      return "var siblings = " + (getSiblings("elem")) + ";\nif(siblings){\n	for(var i = siblings.length-1; i >= 0; i--){\n		if(" + (getName("siblings[i]")) + " === " + (getName()) + "){\n			if(siblings[i] === elem){\n				" + next + "\n			}\n			break;\n		}\n	}\n}";
    },
    "last-of-type": function(next) {
      return "var siblings = " + (getSiblings("elem")) + ";\nif(siblings){\n	for(var i = siblings.length-1; i >= 0; i--){\n		if(" + (getName("siblings[i]")) + " === " + (getName()) + "){\n			if(siblings[i] === elem){\n				" + next + "\n			}\n			break;\n		}\n	}\n}";
    },
    "only-of-type": function(next) {
      return "var siblings = " + (getSiblings("elem")) + ";\n" + (getUniqueName()) + ": if(siblings){\n	for(var i = 0, j = siblings.length; i < j; i++){\n		if(siblings[i] === elem) continue;\n		if(" + (getName("siblings[i]")) + " === " + (getName()) + ") break " + lastUniqueName + ";\n	}\n	\n	" + next + "\n}";
    },
    "only-child": function(next) {
      return "var siblings = " + (getSiblings("elem")) + ";\n" + (getUniqueName()) + ": if(siblings){\n	if(siblings.length !== 1){\n		for(var i = 0, j = siblings.length; i < j; i++){\n			if(" + (isElement("siblings[i]")) + " && siblings[i] !== elem) break " + lastUniqueName + ";\n		}\n	}\n	\n	" + next + "\n}";
    },
    "nth-child": function(next, rule) {
      rule = getNCheck(rule);
      if (rule === null) return next;
      if (rule === falseFunc) return func;
      if (rule === trueFunc) return rule(next === rootFunc ? void 0 : next);
      return "var siblings = " + (getSiblings("elem")) + ";\nif(siblings){\n	for(var pos = 0, i = 0, j = siblings.length; i < j; i++){\n		if(siblings[i] === elem){\n			if(" + rule + "){ " + next + " }\n		}\n		if(" + (isElement("siblings[i]")) + ") pos++;\n	}\n}";
    },
    "nth-last-child": function(next, rule) {
      rule = getNCheck(rule);
      if (rule === null) return next;
      if (rule === falseFunc) return func;
      if (rule === trueFunc) return rule(next === rootFunc ? void 0 : next);
      return "var siblings = " + (getSiblings("elem")) + ";\nif(siblings){\n	for(var pos = 0, i = siblings.length - 1; i >= 0; i--){\n		if(siblings[i] === elem){\n			if(" + rule + "){ " + next + " }\n		}\n		if(" + (isElement("siblings[i]")) + ") pos++;\n	}\n}";
    },
    "nth-of-type": function(next, rule) {
      rule = getNCheck(rule);
      if (rule === null) return next;
      if (rule === falseFunc) return func;
      if (rule === trueFunc) return rule(next === rootFunc ? void 0 : next);
      return "var siblings = " + (getSiblings("elem")) + ";\nif(siblings){\n	for(var pos = 0, i = 0, j = siblings.length; i < j; i++){\n		if(siblings[i] === elem){\n			if(" + rule + "){ " + next + " }\n		}\n		if(" + (getName("siblings[i]")) + " === " + (getName()) + ") pos++;\n	}\n}";
    },
    "nth-last-of-type": function(next, rule) {
      rule = getNCheck(rule);
      if (rule === null) return next;
      if (rule === falseFunc) return func;
      if (rule === trueFunc) return rule(next === rootFunc ? void 0 : next);
      return "var siblings = " + (getSiblings("elem")) + ";\nif(siblings){\n	for(var pos = 0, i = siblings.length-1; i >= 0; i--){\n		if(siblings[i] === elem){\n			if(" + rule + "){ " + next + " }\n		}\n		if(" + (getName("siblings[i]")) + " === " + (getName()) + ") pos++;\n	}\n}";
    },
    selected: function(next) {
      return "" + (getUniqueName()) + ": {\n	if(!(" + (hasAttrib("elem", "selected")) + ")){\n		if(" + (getName(getParent("elem"))) + " !== 'option'){\n			break " + lastUniqueName + ";\n		}\n		var siblings = " + (getSiblings("elem")) + ";\n		if(!siblings) break " + lastUniqueName + ";\n		for(var i = 0, j = siblings.length; i < j; i++){\n		    if(" + (isElement("siblings[i]")) + "){\n		    	if(siblings[i] !== elem) break " + lastUniqueName + ";\n		    	break;\n		    }\n		}\n	}\n	" + next + "\n}	";
    },
    header: function(next) {
      return "var name = " + (getName()) + ";\nif(\n    name === \"h1\" ||\n    name === \"h2\" ||\n    name === \"h3\" ||\n    name === \"h4\" ||\n    name === \"h5\" ||\n    name === \"h6\"\n){ " + next + " }";
    },
    button: function(next) {
      return "if(\n	" + (getName()) + " === \"button\" ||\n    " + (getName()) + " === \"input\" &&\n    " + (hasAttrib("elem", "type")) + " &&\n    " + (getAttributeValue("elem", "type")) + " === \"button\"\n){ " + next + " }";
    },
    input: function(next) {
      return "var name = " + (getName()) + ";\nif(\n    name === \"input\" ||\n    name === \"textarea\" ||\n    name === \"select\" ||\n    name === \"button\"\n){ " + next + " }";
    },
    text: function(next) {
      return "if(\n    " + (getName()) + " === \"input\" &&\n    (\n    	!(" + (hasAttrib("elem", "type")) + ") ||\n    	" + (getAttributeValue("elem", "type")) + " === \"text\"\n    )\n){ " + next + " }";
    },
    checkbox: getAttribFunc("type", "checkbox"),
    file: getAttribFunc("type", "file"),
    password: getAttribFunc("type", "password"),
    radio: getAttribFunc("type", "radio"),
    reset: getAttribFunc("type", "reset"),
    image: getAttribFunc("type", "image"),
    submit: getAttribFunc("type", "submit")
  };

  pseudos = {};

  sortByProcedure = function(arr) {
    var end, i, j, last, parts;
    parts = [];
    i = last = 0;
    j = arr.length - 1;
    end = false;
    while (i <= j) {
      if (procedure[arr[i].type] === -1 || (end = i === j)) {
        if (end) i += 1;
        parts = parts.concat(arr.slice(last, i).sort(function(_arg, _arg2) {
          var a, b;
          a = _arg.type;
          b = _arg2.type;
          return procedure[a] - procedure[b];
        }));
        if (!end) last = parts.push(arr[i]);
      }
      i++;
    }
    return parts;
  };

  procedure = {
    universal: 5,
    id: 4,
    tag: 3,
    "class": 2,
    attribute: 1,
    pseudo: 0,
    descendant: -1,
    child: -1,
    sibling: -1,
    adjacent: -1
  };

  parse = function(selector) {
    var functions;
    functions = CSSwhat(selector).map(function(arr) {
      var func, i, j;
      arr = sortByProcedure(arr);
      func = rootFunc;
      i = 0;
      j = arr.length;
      while (i < j && func !== falseFunc) {
        func = generalRules[arr[i].type](func, arr[i]);
        i++;
      }
      return func;
    }).filter(function(func) {
      return func !== rootFunc && func !== falseFunc;
    });
    uniqNameCounter = 0;
    if (functions.length === 0) {
      return falseFunc;
    } else if (functions.length === 1) {
      return functions[0];
    } else if (__indexOf.call(functions, trueFunc) >= 0) {
      return trueFunc;
    } else {
      return functions.join("\n");
    }
  };

  getFunc = function(selector) {
    return new Function("elem", parse(selector));
  };

  CoffeeSelect = function(query, elem) {
    if (typeof query !== "function") query = getFunc(query);
    if (elem != null) {
      return CoffeeSelect.iterate(query, elem);
    } else {
      return query;
    }
  };

  CoffeeSelect.parse = getFunc;

  CoffeeSelect.is = function(elem, query) {
    if (typeof query !== "function") query = getFunc(query);
    return query(elem);
  };

  CoffeeSelect.iterate = function(query, elems) {
    if (typeof query !== "function") query = getFunc(query);
    if (query === falseFunc) return [];
    if (!Array.isArray(elems)) elems = elems.children;
    return iterate(query, elems);
  };

  CoffeeSelect.filters = filters;

  CoffeeSelect.pseudos = pseudos;

  iterate = function(query, elems) {
    var elem, result, _i, _len;
    result = [];
    for (_i = 0, _len = elems.length; _i < _len; _i++) {
      elem = elems[_i];
      if (!isElement(elem)) continue;
      if (query(elem)) result.push(elem);
      if (elem.children) result = result.concat(iterate(query, elem.children));
    }
    return result;
  };

  module.exports = CoffeeSelect;

}).call(this);
