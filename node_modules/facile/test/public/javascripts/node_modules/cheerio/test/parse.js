(function() {
  var attributes, basic, children, comment, conditional, directive, expect, li, noValueAttribute, parse, script, scriptEmpty, siblings, single, singleWrong, style, styleEmpty, text;

  parse = require('../').parse;

  expect = require('expect.js');

  /*
    Examples
  */

  basic = '<html></html>';

  siblings = '<h2></h2><p></p>';

  single = '<br/>';

  singleWrong = '<br>';

  children = '<html><br/></html>';

  li = '<li class = "durian">Durian</li>';

  attributes = '<img src = "hello.png" alt = "man waving">';

  noValueAttribute = '<textarea disabled></textarea>';

  comment = '<!-- sexy -->';

  conditional = '<!--[if IE 8]><html class="no-js ie8" lang="en"><![endif]-->';

  text = 'lorem ipsum';

  script = '<script type = "text/javascript">alert(\"hi world!\");</script>';

  scriptEmpty = '<script></script>';

  style = '<style type = "text/css"> h2 { color:blue; } </style>';

  styleEmpty = '<style></style>';

  directive = '<!doctype html>';

  /*
    Tests
  */

  describe('parse', function() {
    describe('.eval', function() {
      it("should parse basic empty tags: " + basic, function() {
        var tag;
        tag = parse.eval(basic)[0];
        expect(tag.type).to.equal('tag');
        expect(tag.name).to.equal('html');
        return expect(tag.children).to.be.empty;
      });
      it("should handle sibling tags: " + siblings, function() {
        var dom, h2, p;
        dom = parse.eval(siblings);
        expect(dom).to.have.length(2);
        h2 = dom[0];
        p = dom[1];
        expect(h2.name).to.equal('h2');
        return expect(p.name).to.equal('p');
      });
      it("should handle single tags: " + single, function() {
        var tag;
        tag = parse.eval(single)[0];
        expect(tag.type).to.equal('tag');
        expect(tag.name).to.equal('br');
        return expect(tag.children).to.be.empty;
      });
      it("should handle malformatted single tags: " + singleWrong, function() {
        var tag;
        tag = parse.eval(singleWrong)[0];
        expect(tag.type).to.equal('tag');
        expect(tag.name).to.equal('br');
        return expect(tag.children).to.be.empty;
      });
      it("should handle tags with children: " + children, function() {
        var tag;
        tag = parse.eval(children)[0];
        expect(tag.type).to.equal('tag');
        expect(tag.name).to.equal('html');
        expect(tag.children).to.be.ok;
        return expect(tag.children).to.have.length(1);
      });
      it("should handle tags with children: " + li, function() {
        var tag;
        tag = parse.eval(li)[0];
        expect(tag.children).to.have.length(1);
        return expect(tag.children[0].data).to.equal('Durian');
      });
      it("should handle tags with attributes: " + attributes, function() {
        var attrs;
        attrs = parse.eval(attributes)[0].attribs;
        expect(attrs).to.be.ok;
        expect(attrs.src).to.equal('hello.png');
        return expect(attrs.alt).to.equal('man waving');
      });
      it("should handle value-less attributes: " + noValueAttribute, function() {
        var attrs;
        attrs = parse.eval(noValueAttribute)[0].attribs;
        expect(attrs).to.be.ok;
        return expect(attrs.disabled).to.equal('');
      });
      it("should handle comments: " + comment, function() {
        var elem;
        elem = parse.eval(comment)[0];
        expect(elem.type).to.equal('comment');
        return expect(elem.data).to.equal(' sexy ');
      });
      it("should handle conditional comments: " + conditional, function() {
        var elem;
        elem = parse.eval(conditional)[0];
        expect(elem.type).to.equal('comment');
        return expect(elem.data).to.equal(conditional.replace('<!--', '').replace('-->', ''));
      });
      it("should handle text: " + text, function() {
        text = parse.eval(text)[0];
        expect(text.type).to.equal('text');
        return expect(text.data).to.equal('lorem ipsum');
      });
      it("should handle script tags: " + script, function() {
        script = parse.eval(script)[0];
        expect(script.type).to.equal('script');
        expect(script.name).to.equal('script');
        expect(script.attribs.type).to.equal('text/javascript');
        expect(script.children).to.have.length(1);
        expect(script.children[0].type).to.equal('text');
        return expect(script.children[0].data).to.equal('alert("hi world!");');
      });
      it("should handle style tags: " + style, function() {
        style = parse.eval(style)[0];
        expect(style.type).to.equal('style');
        expect(style.name).to.equal('style');
        expect(style.attribs.type).to.equal('text/css');
        expect(style.children).to.have.length(1);
        expect(style.children[0].type).to.equal('text');
        return expect(style.children[0].data).to.equal(' h2 { color:blue; } ');
      });
      return it("should handle directives: " + directive, function() {
        var elem;
        elem = parse.eval(directive)[0];
        expect(elem.type).to.equal('directive');
        expect(elem.data).to.equal('!doctype html');
        return expect(elem.name).to.equal('!doctype');
      });
    });
    describe('.connect', function() {
      var create;
      create = function(html) {
        var dom;
        dom = parse.eval(html);
        return parse.connect(dom);
      };
      it("should fill in empty attributes: " + basic, function() {
        var tag;
        tag = create(basic)[0];
        expect(tag.parent).to.be(null);
        expect(tag.next).to.be(null);
        expect(tag.prev).to.be(null);
        expect(tag.children).to.be.empty;
        return expect(tag.attribs).to.be.ok;
      });
      it("should should fill in empty attributes for scripts: " + scriptEmpty, function() {
        script = create(scriptEmpty)[0];
        expect(script.parent).to.be(null);
        expect(script.next).to.be(null);
        expect(script.prev).to.be(null);
        expect(script.children).to.be.empty;
        return expect(script.attribs).to.be.ok;
      });
      it("should should fill in empty attributes for styles: " + styleEmpty, function() {
        style = create(styleEmpty)[0];
        expect(style.parent).to.be(null);
        expect(style.next).to.be(null);
        expect(style.prev).to.be(null);
        expect(style.children).to.be.empty;
        return expect(style.attribs).to.be.ok;
      });
      it("should have next and prev siblings: " + siblings, function() {
        var dom, h2, p;
        dom = create(siblings);
        h2 = dom[0];
        p = dom[1];
        expect(h2.parent).to.be(null);
        expect(p.parent).to.be(null);
        expect(h2.next.name).to.equal('p');
        expect(p.prev.name).to.equal('h2');
        expect(h2.children).to.be.empty;
        expect(h2.attribs).to.be.ok;
        expect(p.children).to.be.empty;
        return expect(p.attribs).to.be.ok;
      });
      it("should connect child with parent: " + children, function() {
        var br, html;
        html = create(children)[0];
        expect(html.children).to.have.length(1);
        expect(html.children[0].name).to.equal('br');
        br = html.children[0];
        return expect(br.parent.name).to.equal('html');
      });
      it("should fill in some empty attributes for comments: " + comment, function() {
        var elem;
        elem = create(comment)[0];
        expect(elem.parent).to.be(null);
        expect(elem.next).to.be(null);
        expect(elem.prev).to.be(null);
        expect(elem.children).to.not.be.ok;
        return expect(elem.attribs).to.not.be.ok;
      });
      it("should fill in some empty attributes for text: " + text, function() {
        text = create(text)[0];
        expect(text.parent).to.be(null);
        expect(text.next).to.be(null);
        expect(text.prev).to.be(null);
        expect(text.children).to.not.be.ok;
        return expect(text.attribs).to.not.be.ok;
      });
      return it("should fill in some empty attributes for directives: " + directive, function() {
        var elem;
        elem = create(directive)[0];
        expect(elem.parent).to.be(null);
        expect(elem.next).to.be(null);
        expect(elem.prev).to.be(null);
        expect(elem.children).to.not.be.ok;
        return expect(elem.attribs).to.not.be.ok;
      });
    });
    return describe('.parse', function() {
      var rootTest;
      rootTest = function(root) {
        var child;
        expect(root.name).to.equal('root');
        expect(root.next).to.be(null);
        expect(root.prev).to.be(null);
        expect(root.parent).to.be(null);
        child = root.children[0];
        return expect(child.parent).to.equal(root);
      };
      it("should add root to: " + basic, function() {
        var root;
        root = parse(basic);
        rootTest(root);
        expect(root.children).to.have.length(1);
        return expect(root.children[0].name).to.equal('html');
      });
      it("should add root to: " + siblings, function() {
        var root;
        root = parse(siblings);
        rootTest(root);
        expect(root.children).to.have.length(2);
        expect(root.children[0].name).to.equal('h2');
        expect(root.children[1].name).to.equal('p');
        return expect(root.children[1].parent.name).to.equal('root');
      });
      it("should add root to: " + comment, function() {
        var root;
        root = parse(comment);
        rootTest(root);
        expect(root.children).to.have.length(1);
        return expect(root.children[0].type).to.equal('comment');
      });
      it("should add root to: " + text, function() {
        var root;
        root = parse(text);
        rootTest(root);
        expect(root.children).to.have.length(1);
        return expect(root.children[0].type).to.equal('text');
      });
      it("should add root to: " + scriptEmpty, function() {
        var root;
        root = parse(scriptEmpty);
        rootTest(root);
        expect(root.children).to.have.length(1);
        return expect(root.children[0].type).to.equal('script');
      });
      it("should add root to: " + styleEmpty, function() {
        var root;
        root = parse(styleEmpty);
        rootTest(root);
        expect(root.children).to.have.length(1);
        return expect(root.children[0].type).to.equal('style');
      });
      return it("should add root to: " + directive, function() {
        var root;
        root = parse(directive);
        rootTest(root);
        expect(root.children).to.have.length(1);
        return expect(root.children[0].type).to.equal('directive');
      });
    });
  });

}).call(this);
