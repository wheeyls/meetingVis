(function() {
  var $, expect, fruits, multiclass, script, _;

  $ = require('../');

  expect = require('expect.js');

  _ = require('underscore');

  /*
    Examples
  */

  fruits = '<ul id = "fruits">\n  <li class = "apple">Apple</li>\n  <li class = "orange">Orange</li>\n  <li class = "pear">Pear</li>\n</ul>  '.replace(/(\n|\s{2})/g, '');

  script = '<script src = "script.js" type = "text/javascript"></script>';

  multiclass = '<p><a class = "btn primary" href = "#">Save</a></p>';

  /*
    Tests
  */

  describe('cheerio', function() {
    var testAppleSelect;
    it('should get the version', function() {
      return expect(/\d\.\d\.\d/.test($.version)).to.be.ok;
    });
    it('$(null) should return be empty', function() {
      return expect($(null)).to.be.empty;
    });
    it('$(undefined) should be empty', function() {
      return expect($(void 0)).to.be.empty;
    });
    it('$(null) should be empty', function() {
      return expect($('')).to.be.empty;
    });
    it('$(selector) with no context or root should be empty', function() {
      expect($('.h2')).to.be.empty;
      return expect($('#fruits')).to.be.empty;
    });
    it('should be able to create html without a root or context', function() {
      var $h2;
      $h2 = $('<h2>');
      expect($h2).to.not.be.empty;
      expect($h2).to.have.length(1);
      return expect($h2[0].name).to.equal('h2');
    });
    it('should be able to create complicated html', function() {
      var $script;
      $script = $(script);
      expect($script).to.not.be.empty;
      expect($script).to.have.length(1);
      expect($script[0].attribs.src).to.equal('script.js');
      expect($script[0].attribs.type).to.equal('text/javascript');
      return expect($script[0].children).to.be.empty;
    });
    testAppleSelect = function($apple) {
      expect($apple).to.have.length(1);
      $apple = $apple[0];
      expect($apple.parent.name).to.equal('ul');
      expect($apple.prev).to.be(null);
      expect($apple.next.attribs["class"]).to.equal('orange');
      expect($apple.children).to.have.length(1);
      return expect($apple.children[0].data).to.equal('Apple');
    };
    it('should be able to select .apple with only a context', function() {
      var $apple;
      $apple = $('.apple', fruits);
      return testAppleSelect($apple);
    });
    it('should be able to select .apple with only a root', function() {
      var $apple;
      $apple = $('.apple', null, fruits);
      return testAppleSelect($apple);
    });
    it('should be able to select an id', function() {
      var $fruits;
      $fruits = $('#fruits', null, fruits);
      expect($fruits).to.have.length(1);
      return expect($fruits[0].attribs.id).to.equal('fruits');
    });
    it('should be able to select a tag', function() {
      var $ul;
      $ul = $('ul', fruits);
      expect($ul).to.have.length(1);
      return expect($ul[0].name).to.equal('ul');
    });
    it('should be able to select multiple tags', function() {
      var $fruits, classes;
      $fruits = $('li', null, fruits);
      expect($fruits).to.have.length(3);
      classes = ['apple', 'orange', 'pear'];
      return $fruits.each(function(i, $fruit) {
        return expect($fruit.attribs["class"]).to.equal(classes[i]);
      });
    });
    it('should be able to do: $("#fruits .apple")', function() {
      var $apple;
      $apple = $('#fruits .apple', fruits);
      return testAppleSelect($apple);
    });
    it('should be able to do: $("li.apple")', function() {
      var $apple;
      $apple = $('li.apple', fruits);
      return testAppleSelect($apple);
    });
    it('should be able to select by attributes', function() {
      var $apple;
      $apple = $('li[class=apple]', fruits);
      return testAppleSelect($apple);
    });
    it('should be able to select multiple classes: $(".btn.primary")', function() {
      var $a;
      $a = $('.btn.primary', multiclass);
      expect($a).to.have.length(1);
      return expect($a[0].children[0].data).to.equal('Save');
    });
    it('should be able to select multiple elements: $(".apple, #fruits")', function() {
      var $apple, $elems, $fruits;
      $elems = $('.apple, #fruits', fruits);
      expect($elems).to.have.length(2);
      $apple = _($elems).filter(function(elem) {
        return elem.attribs["class"] === 'apple';
      });
      $fruits = _($elems).filter(function(elem) {
        return elem.attribs.id === 'fruits';
      });
      testAppleSelect($($apple));
      return expect($fruits[0].attribs.id).to.equal('fruits');
    });
    it('should select first element $(:first)');
    it('should be able to select immediate children: $("#fruits > .pear")', function() {
      var $elem, $fruitsWithMorePear;
      $fruitsWithMorePear = $('.pear', fruits).append('<li class = "pear">Another Pear!</li>');
      expect($('#fruits .pear', $fruitsWithMorePear)).to.have.length(2);
      $elem = $('#fruits > .pear', $fruitsWithMorePear);
      expect($elem).to.have.length(1);
      return expect($elem.attr('class')).to.equal('pear');
    });
    it('should be able to select immediate children: $(".apple + .pear")', function() {
      var $elem;
      $elem = $('.apple + li', fruits);
      expect($elem).to.have.length(1);
      $elem = $('.apple + .pear', fruits);
      expect($elem).to.have.length(0);
      $elem = $('.apple + .orange', fruits);
      expect($elem).to.have.length(1);
      return expect($elem.attr('class')).to.equal('orange');
    });
    it('should be able to select immediate children: $(".apple ~ .pear")', function() {
      var $elem;
      $elem = $('.apple ~ li', fruits);
      expect($elem).to.have.length(2);
      $elem = $('.apple ~ .pear', fruits);
      return expect($elem.attr('class')).to.equal('pear');
    });
    it('should handle wildcards on attributes: $("li[class*=r]")', function() {
      var $elem;
      $elem = $("li[class*=r]", fruits);
      expect($elem).to.have.length(2);
      expect($elem.eq(0).attr('class')).to.equal('orange');
      return expect($elem.eq(1).attr('class')).to.equal('pear');
    });
    it('should handle beginning of attr selectors: $("li[class^=o]")', function() {
      var $elem;
      $elem = $("li[class^=o]", fruits);
      expect($elem).to.have.length(1);
      return expect($elem.eq(0).attr('class')).to.equal('orange');
    });
    it('should handle beginning of attr selectors: $("li[class$=e]")', function() {
      var $elem;
      $elem = $("li[class$=e]", fruits);
      expect($elem).to.have.length(2);
      expect($elem.eq(0).attr('class')).to.equal('apple');
      return expect($elem.eq(1).attr('class')).to.equal('orange');
    });
    return it('should gracefully degrade on complex, unmatched queries', function() {
      var $elem;
      $elem = $('Eastern States Cup #8-fin&nbsp;<br>Downhill&nbsp;');
      expect($elem).to.be.an(Array);
      return expect($elem).to.have.length(0);
    });
  });

}).call(this);
