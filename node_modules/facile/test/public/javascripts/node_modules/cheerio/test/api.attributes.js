(function() {
  var $, expect, fruits;

  $ = require('../');

  expect = require('expect.js');

  /*
    Examples
  */

  fruits = '<ul id = "fruits">\n  <li class = "apple">Apple</li>\n  <li class = "orange">Orange</li>\n  <li class = "pear">Pear</li>\n</ul>  '.replace(/(\n|\s{2})/g, '');

  /*
    Tests
  */

  describe('$(...)', function() {
    describe('.attr', function() {
      it('() : should get all the attributes', function() {
        var attrs;
        attrs = $('ul', fruits).attr();
        return expect(attrs.id).to.equal('fruits');
      });
      it('(invalid key) : invalid attr should get undefined', function() {
        var attr;
        attr = $('.apple', fruits).attr('lol');
        return expect(attr).to.be(void 0);
      });
      it('(valid key) : valid attr should get value', function() {
        var cls;
        cls = $('.apple', fruits).attr('class');
        return expect(cls).to.equal('apple');
      });
      it('(key, value) : should set attr', function() {
        var $fruits, $pear;
        $fruits = $(fruits);
        $pear = $('.pear', $fruits).attr('id', 'pear');
        expect($('#pear', $fruits)).to.have.length(1);
        return expect($pear.cheerio).to.not.be(void 0);
      });
      return it('(map) : object map should set multiple attributes', function() {
        var $fruits, attrs;
        $fruits = $(fruits);
        $('.apple', $fruits).attr({
          id: 'apple',
          style: 'color:red;',
          'data-url': 'http://apple.com'
        });
        attrs = $('.apple', $fruits).attr();
        expect(attrs.id).to.equal('apple');
        expect(attrs.style).to.equal('color:red;');
        return expect(attrs['data-url']).to.equal('http://apple.com');
      });
    });
    describe('.removeAttr', function() {
      it('(key) : should remove a single attr', function() {
        var $fruits;
        $fruits = $(fruits);
        expect($('ul', $fruits).attr('id')).to.not.be(void 0);
        $('ul', $fruits).removeAttr('id');
        return expect($('ul', $fruits).attr('id')).to.be(void 0);
      });
      return it('should return cheerio object', function() {
        var obj;
        obj = $('ul', fruits).removeAttr('id').cheerio;
        return expect(obj).to.be.ok;
      });
    });
    describe('.hasClass', function() {
      it('(valid class) : should return true', function() {
        var $fruits, cls;
        $fruits = $(fruits);
        cls = $('.apple', $fruits).hasClass('apple');
        return expect(cls).to.be.ok;
      });
      return it('(invalid class) : should return false', function() {
        var cls;
        cls = $('#fruits', fruits).hasClass('fruits');
        return expect(cls).to.not.be.ok;
      });
    });
    describe('.addClass', function() {
      it('(first class) : should add the class to the element', function() {
        var $fruits, cls;
        $fruits = $(fruits);
        $('#fruits', $fruits).addClass('fruits');
        cls = $('#fruits', $fruits).hasClass('fruits');
        return expect(cls).to.be.ok;
      });
      it('(single class) : should add the class to the element', function() {
        var $fruits, cls;
        $fruits = $(fruits);
        $('.apple', $fruits).addClass('fruit');
        cls = $('.apple', $fruits).hasClass('fruit');
        return expect(cls).to.be.ok;
      });
      it('(class): adds classes to many selected items', function() {
        var $fruits;
        $fruits = $(fruits);
        $('li', $fruits).addClass('fruit');
        expect($('.apple', $fruits).hasClass('fruit')).to.be.ok;
        expect($('.orange', $fruits).hasClass('fruit')).to.be.ok;
        return expect($('.pear', $fruits).hasClass('fruit')).to.be.ok;
      });
      it('(class class class) : should add multiple classes to the element', function() {
        var $fruits;
        $fruits = $(fruits);
        $('.apple', $fruits).addClass('fruit red tasty');
        expect($('.apple', $fruits).hasClass('apple')).to.be.ok;
        expect($('.apple', $fruits).hasClass('fruit')).to.be.ok;
        expect($('.apple', $fruits).hasClass('red')).to.be.ok;
        return expect($('.apple', $fruits).hasClass('tasty')).to.be.ok;
      });
      return it('(fn) : should add classes returned from the function');
    });
    return describe('.removeClass', function() {
      it('() : should remove all the classes', function() {
        var $fruits;
        $fruits = $(fruits);
        $('.pear', $fruits).addClass('fruit');
        $('.pear', $fruits).removeClass();
        return expect($('.pear', $fruits).attr('class')).to.be(void 0);
      });
      it('(invalid class) : should not remove anything', function() {
        var $fruits;
        $fruits = $(fruits);
        $('.pear', $fruits).removeClass('fruit');
        return expect($('.pear', $fruits).hasClass('pear')).to.be.ok;
      });
      it('(single class) : should remove a single class from the element', function() {
        var $fruits;
        $fruits = $(fruits);
        $('.pear', $fruits).addClass('fruit');
        expect($('.pear', $fruits).hasClass('fruit')).to.be.ok;
        $('.pear', $fruits).removeClass('fruit');
        expect($('.pear', $fruits).hasClass('fruit')).to.not.be.ok;
        return expect($('.pear', $fruits).hasClass('pear')).to.be.ok;
      });
      it('(class class class) : should remove multiple classes from the element', function() {
        var $fruits;
        $fruits = $(fruits);
        $('.apple', $fruits).addClass('fruit red tasty');
        expect($('.apple', $fruits).hasClass('apple')).to.be.ok;
        expect($('.apple', $fruits).hasClass('fruit')).to.be.ok;
        expect($('.apple', $fruits).hasClass('red')).to.be.ok;
        expect($('.apple', $fruits).hasClass('tasty')).to.be.ok;
        $('.apple', $fruits).removeClass('apple red tasty');
        expect($('.fruit', $fruits).hasClass('apple')).to.not.be.ok;
        expect($('.fruit', $fruits).hasClass('red')).to.not.be.ok;
        expect($('.fruit', $fruits).hasClass('tasty')).to.not.be.ok;
        return expect($('.fruit', $fruits).hasClass('fruit')).to.be.ok;
      });
      return it('(fn) : should remove classes returned from the function');
    });
  });

}).call(this);
