(function() {
  var $, expect, fruits;

  $ = require('../');

  expect = require('expect.js');

  /*
    Examples
  */

  fruits = '<ul id = "fruits">\n  <li class = "apple">Apple</li>\n  <li class = "orange">Orange</li>\n  <li class = "pear">Pear</li>\n</ul>  '.replace(/(\n|\s{2})/g, '');

  /*
    Tests
  */

  describe('$(...)', function() {
    describe('.append', function() {
      it('() : should do nothing', function() {
        return expect($('#fruits', fruits).append()[0].name).to.equal('ul');
      });
      it('(html) : should add element as last child', function() {
        var $fruits;
        $fruits = $(fruits);
        $('#fruits', $fruits).append('<li class = "plum">Plum</li>');
        return expect($('#fruits', $fruits).children(3).hasClass('plum')).to.be.ok;
      });
      it('($(...)) : should add element as last child', function() {
        var $fruits, $plum;
        $fruits = $(fruits);
        $plum = $('<li class = "plum">Plum</li>');
        $('#fruits', $fruits).append($plum);
        return expect($('#fruits', $fruits).children(3).hasClass('plum')).to.be.ok;
      });
      it('($(...), html) : should add multiple elements as last children', function() {
        var $fruits, $plum, grape;
        $fruits = $(fruits);
        $plum = $('<li class = "plum">Plum</li>');
        grape = '<li class = "grape">Grape</li>';
        $('#fruits', $fruits).append($plum, grape);
        expect($('#fruits', $fruits).children(3).hasClass('plum')).to.be.ok;
        return expect($('#fruits', $fruits).children(4).hasClass('grape')).to.be.ok;
      });
      it('(fn) : should add returned element as last child');
      return it('should maintain correct object state (Issue: #10)', function() {
        var obj;
        obj = $("<div></div>").append("<div><div></div></div>").children().children().parent();
        return expect(obj).to.be.ok;
      });
    });
    describe('.prepend', function() {
      it('() : should do nothing', function() {
        return expect($('#fruits', fruits).prepend()[0].name).to.equal('ul');
      });
      it('(html) : should add element as first child', function() {
        var $fruits;
        $fruits = $(fruits);
        $('#fruits', $fruits).prepend('<li class = "plum">Plum</li>');
        return expect($('#fruits', $fruits).children(0).hasClass('plum')).to.be.ok;
      });
      it('($(...)) : should add element as first child', function() {
        var $fruits, $plum;
        $fruits = $(fruits);
        $plum = $('<li class = "plum">Plum</li>');
        $('#fruits', $fruits).prepend($plum);
        return expect($('#fruits', $fruits).children(0).hasClass('plum')).to.be.ok;
      });
      it('(html, $(...), html) : should add multiple elements as first children', function() {
        var $fruits, $plum, grape;
        $fruits = $(fruits);
        $plum = $('<li class = "plum">Plum</li>');
        grape = '<li class = "grape">Grape</li>';
        $('#fruits', $fruits).prepend($plum, grape);
        expect($('#fruits', $fruits).children(0).hasClass('plum')).to.be.ok;
        return expect($('#fruits', $fruits).children(1).hasClass('grape')).to.be.ok;
      });
      return it('(fn) : should add returned element as first child');
    });
    describe('.after', function() {
      it('() : should do nothing', function() {
        return expect($('#fruits', fruits).after()[0].name).to.equal('ul');
      });
      it('(html) : should add element as next sibling', function() {
        var $fruits, grape;
        $fruits = $(fruits);
        grape = '<li class = "grape">Grape</li>';
        $('.apple', $fruits).after(grape);
        return expect($('.apple', $fruits).next().hasClass('grape')).to.be.ok;
      });
      it('($(...)) : should add element as next sibling', function() {
        var $fruits, $plum;
        $fruits = $(fruits);
        $plum = $('<li class = "plum">Plum</li>');
        $('.apple', $fruits).after($plum);
        return expect($('.apple', $fruits).next().hasClass('plum')).to.be.ok;
      });
      it('($(...), html) : should add multiple elements as next siblings', function() {
        var $fruits, $plum, grape;
        $fruits = $(fruits);
        $plum = $('<li class = "plum">Plum</li>');
        grape = '<li class = "grape">Grape</li>';
        $('.apple', $fruits).after($plum, grape);
        expect($('.apple', $fruits).next().hasClass('plum')).to.be.ok;
        return expect($('.plum', $fruits).next().hasClass('grape')).to.be.ok;
      });
      return it('(fn) : should add returned element as next sibling');
    });
    describe('.before', function() {
      it('() : should do nothing', function() {
        return expect($('#fruits', fruits).before()[0].name).to.equal('ul');
      });
      it('(html) : should add element as previous sibling', function() {
        var $fruits, grape;
        $fruits = $(fruits);
        grape = '<li class = "grape">Grape</li>';
        $('.apple', $fruits).before(grape);
        return expect($('.apple', $fruits).prev().hasClass('grape')).to.be.ok;
      });
      it('($(...)) : should add element as previous sibling', function() {
        var $fruits, $plum;
        $fruits = $(fruits);
        $plum = $('<li class = "plum">Plum</li>');
        $('.apple', $fruits).before($plum);
        return expect($('.apple', $fruits).prev().hasClass('plum')).to.be.ok;
      });
      it('($(...), html) : should add multiple elements as previous siblings', function() {
        var $fruits, $plum, grape;
        $fruits = $(fruits);
        $plum = $('<li class = "plum">Plum</li>');
        grape = '<li class = "grape">Grape</li>';
        $('.apple', $fruits).before($plum, grape);
        expect($('.apple', $fruits).prev().hasClass('grape')).to.be.ok;
        return expect($('.grape', $fruits).prev().hasClass('plum')).to.be.ok;
      });
      return it('(fn) : should add returned element as previous sibling');
    });
    describe('.remove', function() {
      it('() : should remove selected elements', function() {
        var $fruits;
        $fruits = $(fruits);
        $('.apple', $fruits).remove();
        return expect($fruits.find('.apple')).to.have.length(0);
      });
      return it('(selector) : should remove matching selected elements', function() {
        var $fruits;
        $fruits = $(fruits);
        $('li', $fruits).remove('.apple');
        return expect($fruits.find('.apple')).to.have.length(0);
      });
    });
    describe('.replaceWith', function() {
      it('(elem) : should replace one <li> tag with another', function() {
        var $fruits, plum;
        $fruits = $(fruits);
        plum = $('<li class = "plum">Plum</li>');
        $('.pear', $fruits).replaceWith(plum);
        expect($('.orange', $fruits).next().hasClass('plum')).to.be.ok;
        return expect($('.orange', $fruits).next().html()).to.equal('Plum');
      });
      it('(elem) : should replace the selected element with given element', function() {
        var elem, replaced, src;
        src = $('<ul></ul>');
        elem = $('<h2>hi <span>there</span></h2>');
        replaced = src.replaceWith(elem);
        expect(replaced[0].parent.type).to.equal('root');
        expect($.html(replaced[0].parent)).to.equal('<h2>hi <span>there</span></h2>');
        return expect($.html(replaced)).to.equal('<ul></ul>');
      });
      it('(elem) : should replace the single selected element with given element', function() {
        var elem, replaced, src;
        src = $('<br/>');
        elem = $('<h2>hi <span>there</span></h2>');
        replaced = src.replaceWith(elem);
        expect(replaced[0].parent.type).to.equal('root');
        expect($.html(replaced[0].parent)).to.equal('<h2>hi <span>there</span></h2>');
        return expect($.html(replaced)).to.equal('<br/>');
      });
      return it('(str) : should accept strings', function() {
        var replaced, src;
        src = $('<br/>');
        replaced = src.replaceWith('<h2>hi <span>there</span></h2>');
        expect(replaced[0].parent.type).to.equal('root');
        expect($.html(replaced[0].parent)).to.equal('<h2>hi <span>there</span></h2>');
        return expect($.html(replaced)).to.equal('<br/>');
      });
    });
    describe('.empty', function() {
      return it('() : should remove all children from selected elements', function() {
        var $fruits;
        $fruits = $(fruits);
        $('#fruits', $fruits).empty();
        return expect($('#fruits', $fruits).children()).to.have.length(0);
      });
    });
    describe('.html', function() {
      it('() : should get the innerHTML for an element', function() {
        var $fruits, items;
        $fruits = $(fruits);
        items = ['<li class="apple">Apple</li>', '<li class="orange">Orange</li>', '<li class="pear">Pear</li>'];
        items = items.join('');
        return expect($('#fruits', $fruits).html()).to.equal(items);
      });
      it('() : should get innerHTML even if its just text', function() {
        var item;
        item = '<li class = "pear">Pear</li>';
        return expect($('.pear', item).html()).to.equal('Pear');
      });
      it('() : should return empty string if nothing inside', function() {
        var item;
        item = '<li></li>';
        return expect($('li', item).html()).to.equal('');
      });
      return it('(html) : should set the html for its children', function() {
        var $fruits, html;
        $fruits = $(fruits);
        $('#fruits', $fruits).html('<li class = "durian">Durian</li>');
        html = $('#fruits', $fruits).html();
        return expect(html).to.equal('<li class="durian">Durian</li>');
      });
    });
    return describe('.text', function() {
      it('() : gets the text for a single element', function() {
        return expect($('.apple', fruits).text()).to.equal('Apple');
      });
      it('() : combines all text from children text nodes', function() {
        return expect($('#fruits', fruits).text()).to.equal('AppleOrangePear');
      });
      it('(text) : sets the text for the child node', function() {
        var $fruits;
        $fruits = $(fruits);
        $('.apple', $fruits).text('Granny Smith Apple');
        return expect($('.apple', $fruits)[0].children[0].data).to.equal('Granny Smith Apple');
      });
      it('should allow functions as arguments', function() {
        var $fruits;
        $fruits = $(fruits);
        $('.apple', $fruits).text(function(i, content) {
          expect(i).to.equal(0);
          expect(content).to.equal('Apple');
          return 'whatever mate';
        });
        return expect($('.apple', $fruits)[0].children[0].data).to.equal('whatever mate');
      });
      it('should decode special chars', function() {
        var text;
        text = $('<p>M&amp;M</p>').text();
        return expect(text).to.equal('M&M');
      });
      return it('should work with special chars added as strings', function() {
        var text;
        text = $('<p>M&M</p>').text();
        return expect(text).to.equal('M&M');
      });
    });
  });

}).call(this);
